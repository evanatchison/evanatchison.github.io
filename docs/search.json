[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a sophomore B.A. History Major at St. Olaf College in Northfield, Minnesota. While you might think to yourself, “A history major who has a coding webpage? How odd!”, I also have a love for coding and am pursuing a Concentration in Statistics and Data Science alongside my History major. I hope to combine my two interests of history and data science to tell historical stories using data. Outside of my studies, I am a percussionist in both the St. Olaf Band and St. Olaf Orchetra.\n\n\nI am a passionate sports fan and I hope to translate this passion into the work I do on this website. While primarily a soccer fanatic, I also have great interest in basketball and football analytics. Using this passion, I love creating models that not only allow sports fans and executives to reflect on what has created sporting success in the past, but also what is predicted for the future of sports. Influenced by my love of history, I am also interested in political and population data that tells the stories of human migrations and changes in global political landscapes.\n\n\nWant to reach out? Feel free to connect with me by email atchis1@stolaf.edu"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evan Atchison",
    "section": "",
    "text": "B.A. History Major, Statistics and Data Science Concentrator @ St. Olaf College\n\n\nBA in History with Statistics and Data Science concentration 2026 | St. Olaf College"
  },
  {
    "objectID": "index.html#evan-atchison",
    "href": "index.html#evan-atchison",
    "title": "Evan Atchison",
    "section": "",
    "text": "B.A. History Major, Statistics and Data Science Concentrator @ St. Olaf College\n\n\nBA in History with Statistics and Data Science concentration 2026 | St. Olaf College"
  },
  {
    "objectID": "Wisconsin.html",
    "href": "Wisconsin.html",
    "title": "Wisconsin Gerrymandering Map",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nLoading required package: maps\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:purrr':\n\n    map"
  },
  {
    "objectID": "chloropleth_map.html",
    "href": "chloropleth_map.html",
    "title": "Analyzing the Relationship Between Median Income and Homeownership",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mdsr)   \nlibrary(viridis)\n\nLoading required package: viridisLite\n\nlibrary(ggplot2)\nlibrary(ggthemes)"
  },
  {
    "objectID": "chloropleth_map.html#introduction",
    "href": "chloropleth_map.html#introduction",
    "title": "Analyzing the Relationship Between Median Income and Homeownership",
    "section": "Introduction",
    "text": "Introduction\nWith it becoming increasingly challenging for young workers to find homes, this plot attempts to discern a relationship between a state’s homeownership rate and its median income. This data comes from state_stats in the usdata package from r; the map comes from map_data in the maps package.\n\nstate_statistics &lt;- state_stats |&gt;\n  filter(state != \"District of Columbia\") |&gt;\n  mutate(state_name = str_squish(str_to_lower(as.character(state)))) |&gt;\n  right_join(us_states, by = c(\"state_name\" = \"region\"))\n\n\nstate_statistics |&gt;\n  ggplot(aes(x = long, y = lat, \n             group = group)) +\n  geom_polygon(aes(fill = med_income, alpha = homeownership)) +\n  labs(title = \"Relationship Between Homeownership and Median Income\", fill = \"Median Income\", alpha = \"Homeownership\") +\n  theme(axis.title.x = element_blank()) +\n  theme(axis.title.y = element_blank())"
  },
  {
    "objectID": "chloropleth_map.html#analysis",
    "href": "chloropleth_map.html#analysis",
    "title": "Analyzing the Relationship Between Median Income and Homeownership",
    "section": "Analysis",
    "text": "Analysis\nIn this map, we see that there is no clear correlation between median income and home ownership rates in a state. This is most visible in the juxtaposition of West Virginia, the state with the second-lowest median income but highest home ownership rate, and Minnesota, the state with the second-highest home ownership but a much higher median income. We can also see that lower-median income states like Mississippi and Maine have comparatively higher home ownership rates while California, New York, Massachusetts have much lower home ownership rates while simultaneously boasting high median incomes. With this, we can see that there may be other, more important factors that influence home ownership rates. New York and Massachusetts, two states with small land masses but booming economic centers, lack the size to accommodate adequate housing, meaning property prices are much higher and thus less desirable for aspiring homeowners. Furthermore, states on the West Coast have increasingly high standards of living, meaning property prices are undesirable and unaffordable for a large part of these states’ populations. But, in states such as Minnesota, West Virginia, and Michigan, lower housing prices allow for greater home ownership as a greater percentage of the population can afford property. This demonstrates that property prices and land mass are two variables with greater influence on home ownership."
  },
  {
    "objectID": "Wisconsin.html#introduction",
    "href": "Wisconsin.html#introduction",
    "title": "Wisconsin Gerrymandering Map",
    "section": "Introduction",
    "text": "Introduction\nRecently, the state of Wisconsin announced the redrawing of its legislative maps after a decade of guaranteed Republican control of the state legislature. This control was due to extreme gerrymandering that made it impossible for Democrats to have control in the state legislature. But, with the redrawing of districts, Wisconsin hopes to create districts that better reflect the true voting habits of its voters. For this project, we will be revisiting the old district lines of Wisconsin to see just how gerrymandered the state was. With this, we can see the necessity for change in Wisconsin’s district lines and also the dangers of gerrymandering as a whole. To do this, we will use the data set results_house from the fec16 library along with a projection map of Wisconsin’s districts.\n\nresults_house &lt;- results_house |&gt;\n  mutate(district = parse_number(district_id)) |&gt;\n  group_by(state, district) |&gt;\n  summarize(candidates = n(),\n            total_votes = sum(general_votes, na.rm = TRUE),\n            d_votes = sum(ifelse(party == \"DEM\", general_votes, 0), na.rm = TRUE),\n    r_votes = sum(ifelse(party == \"REP\", general_votes, 0), na.rm = TRUE),\n    .groups = \"drop\",\n    r_prop = r_votes/total_votes,\n    winner = ifelse(d_votes &gt; r_votes, \"Democrat\", \"Republican\"))\n\n\nwis_results &lt;- results_house |&gt;\n  filter(state == \"WI\") \n\n\nwis_merged &lt;- wis_dist |&gt;\n  st_transform(4326) |&gt;\n  inner_join(wis_results, by = c(\"DISTRICT\" = \"district\"))\nhead(wis_merged, width = Inf)\n\n\nwisconsin_map &lt;- ggplot(data = wis_merged, aes(fill = winner)) +\n  annotation_map_tile(zoom = 6, type = \"osm\", progress = \"none\") + \n  geom_sf(alpha = .75) +\n  scale_fill_manual(\"Winner\", values = c(\"blue\", \"red\")) + \n  geom_sf_label(aes(label = DISTRICT), fill = \"white\") + \n  theme_void()\nwisconsin_map\n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n\n\nLoading required namespace: raster\n\n\n\n\n\n\n  wisconsin_map + \n  aes(fill = r_prop) + \n  scale_fill_distiller(\n    \"Proportion\\nRepublican\", \n    palette = \"RdBu\", \n    limits = c(0.2, 0.8))\n\nScale for fill is already present.\nAdding another scale for fill, which will replace the existing scale.\n\n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data"
  },
  {
    "objectID": "Wisconsin.html#analysis",
    "href": "Wisconsin.html#analysis",
    "title": "Wisconsin Gerrymandering Map",
    "section": "Analysis",
    "text": "Analysis\nWith the overlay of the district on a map of Wisconsin, we can see how the gerrymandered lines operated. We can see this in the way lines were drawn in Milwaukee and Madison, Wisconsin’s two largest and most democratic cities. In Zone 4, we see how an incredibly dense part of Milwaukee’s population, a great majority of which are Democrat, is grouped into a tiny district. Because of this, the surrounding zones incorporating the Milwaukee area ensure Republicans have more power in their vote as a high concentration of Democratic voters find themselves in Zone 4 and not part of the other districts. Simiarlarly, Districts 2 and 3 employ similar strategies by clumping together a high volume of Democratic voters in Madison and Wisconsin’s western border into two districts to ensure easy wins for Democrats. With a majority of Democratic voters in only three districts, Wisconsin Republicans have, in essence, free paths to victory in the other five districts. Thus, the old district lines of Wisconsin ensured that the districts would always be 5 - 3 in favor of Republicans, a clear representation of the abuses of power gerrymandering can pose to the Democratic process. Wisconsin’s new districts lines provides hope for the future of the Democratic process in the state, which, as we can see in this map, has needed to change for a decade."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Evan Atchison",
    "section": "",
    "text": "B.A. History Major, Statistics and Data Science Concentrator @ St. Olaf College\n\n\nBA in History with Statistics and Data Science concentration 2026 | St. Olaf College"
  },
  {
    "objectID": "about.html#introduction",
    "href": "about.html#introduction",
    "title": "About",
    "section": "",
    "text": "I am a sophomore B.A. History Major at St. Olaf College in Northfield, Minnesota. While you might think to yourself, “A history major who has a coding webpage? How odd!”, I also have a love for coding and am pursuing a Concentration in Statistics and Data Science alongside my History major. I hope to combine my two interests of history and data science to tell historical stories using data. Outside of my studies, I am a percussionist in both the St. Olaf Band and St. Olaf Orchetra.\n\n\nI am a passionate sports fan and I hope to translate this passion into the work I do on this website. While primarily a soccer fanatic, I also have great interest in basketball and football analytics. Using this passion, I love creating models that not only allow sports fans and executives to reflect on what has created sporting success in the past, but also what is predicted for the future of sports. Influenced by my love of history, I am also interested in political and population data that tells the stories of human migrations and changes in global political landscapes.\n\n\nWant to reach out? Feel free to connect with me by email atchis1@stolaf.edu"
  },
  {
    "objectID": "null_hypothesis.html",
    "href": "null_hypothesis.html",
    "title": "Do Free Throws Win Basketball Teams Games?",
    "section": "",
    "text": "With March Madness upon us (this is being published on Friday, March 22), we are being treated to three weeks of the very best college basketball. Whether it’s a potential first-round upset or a nail-biting Final Four match-up, close games are a staple of March Madness; many argue it’s what makes the tournament so great. Free throws can often be the most decisive factor in what team wins a close game. Or are they? While there are many clichés about the importance of a team making free throws, I take a closer look at whether or not free throws really do win games.\n\n\nAn article by the NCAA says that in 2018 teams shot, on average, 19.6 free throws and made 14. With these averages in mind, I will be testing these conditions under the null hypothesis by analyzing the relationship between the team wins in an individual season and if they made more than 14 free throws in a game. The goal of this test is to determine the importance, or potential lack thereof, of making free throws.\n\n\n\nFor this experiment, I have collected data of each regular season game from the 2017-2018 Louisiana State University (LSU) men’s basketball season. The reason for this is LSU made 13.9 per game that season, very close to the overall NCAA average. In this data set, we have opponent faced, free throws made, free throws attempted, and the outcome of the game (Win or Loss).\n\n\nRows: 30 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Opponent, Result\ndbl (2): FTM, FTA\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 30 × 4\n   Opponent            FTM   FTA Result\n   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; \n 1 Alcorn State         16    24 Win   \n 2 Samford              19    20 Win   \n 3 Michigan             16    23 Win   \n 4 Notre Dame            9    12 Loss  \n 5 Marquette            23    26 Loss  \n 6 UT Martin            12    20 Win   \n 7 UNCW                 17    20 Win   \n 8 Houston              17    20 Win   \n 9 Stephen F. Austin    23    29 Loss  \n10 Sam Houston State    11    20 Win   \n# ℹ 20 more rows\n\n\n\nlsu_basketball &lt;- lsu_basketball |&gt;\n  mutate(ftpct = (FTM / FTA),\n         ftm_average = ifelse(FTM &gt; 13, \"Yes\", \"No\"),\n         ftpct_average = ifelse(ftpct &gt; .713, \"Yes\", \"No\"))\n\nview(lsu_basketball)\n\nAlong with our initial variable, this code calculates the free throw percentage for each game. And, using the ‘ifelse’ statement within mutate, we can also see whether or not both free throws made and free throw percentage was better or worse than the national average (14 Free Throws Made and 71.4%); “Yes” denotes better than the average, “No” denotes worse than average.\n\nftm_summary &lt;- lsu_basketball |&gt;\n  group_by(ftm_average) |&gt;\n  summarize(win_rate = mean(Result == \"Win\"))\n\nlsu_diff &lt;- ftm_summary[[2]][[2]] - ftm_summary[[2]][[1]]\nlsu_diff\n\n[1] -0.06666667\n\n\nConveniently, of the 30 regular season games LSU played, they made more than the average 15 times and less than the average 15 times. To calculate the win percentage of games in which they shot above or below the average, we find the mean of wins when grouped by the averages. Following this, ‘lsu_diff’ is the difference between the win percentage when LSU shot above the average and when LSU shot below the average. From the data, we can see that, shockingly, LSU won more games when making a below average quantity of free throws.\n\nftm_simulation &lt;- vector(\"double\", 5000)\nfor(i in 1:5000) {\n  ftm_summary &lt;- lsu_basketball |&gt;\n    mutate(ftm_average = sample(ftm_average)) |&gt;\n    group_by(ftm_average) |&gt;\n    summarize(win_rate = mean(Result == \"Win\"))\n   ftm_simulation[[i]] &lt;- ftm_summary[[2]][[2]] - ftm_summary[[2]][[1]]\n}\n\nview(ftm_simulation)\n\nAs we are testing the condition of making free throws under the null hypothesis, the next step in our experiment is running simulations to create a null distribution. This code runs 5000 simulations, each simulation randomizing the difference of a team’s win percentage when making the average and not making the average in a hypothetical season.\n\nftm_simulated &lt;- tibble(ftm_simulation = ftm_simulation)\n\nggplot(ftm_simulated, aes(x = ftm_simulation)) +\n  geom_histogram(aes(y = ..density..), alpha = .4, fill = \"black\") +\n  geom_density(fill = \"purple\", alpha = .3) +\n  geom_vline(xintercept = lsu_diff, color = \"yellow\") +\n  labs(title = \"Free Throws Made Null Distribution\", x = \"FTM Differential\", y = \"Density\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\np_value &lt;- sum(ftm_simulation &gt;= lsu_diff) / 5000\np_value\n\n[1] 0.7632\n\n\nThe final step is to plot our null distribution alongside our value for LSU’s win differential using a vertical line. When looking at the graph, we can see the vertical line fits right with the null distribution, suggesting that the chance of LSU’s win correlation with free throws is certainly possible under null conditions. We can find a mathematical value for this using the p-value. Seen up above, this is a gigantic p-value that means that more than 75% of the time would we expect to see this win differential under null conditions, meaning we absolutely can not reject the null hypothesis. To interpret this in context of basketball statistics, we can conclude that making more than the average number of free throws in a game may not do much to a team’s probability of winning games.\n\n\n\nWhile free throws made were not much a factor in LSU winning or losing games, we can use the code up above to see if other variables may have a greater impact on determining the results of LSU games by replacing free throws made with a different variable. In this case, I use free throw percentage, and its relation to the national average, to see if that has a greater correlation with game results.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n[1] 0.7986\n\n\n\n\n\nSimilar to the histogram comparing free throw average, we can see that LSU’s differential with free throw percentage also falls right within the null distribution. When looking at the p-value, this is evident by the huge value. This allows us to conclude that making above the national average in free throws and free throw percentage does little to impact the results of college basketball games.\n\n\n\nFollowing my analysis of the 2017-18 LSU season, I was shocked by the lack of relationship between free throw metrics and the outcomes of games. There may be a few ways to explain this; namely, as referenced by the NCAA article, the amount of free throws teams are shooting is decreasing. As basketball has become more spread out, thanks to a revolution of the Three-Pointer led by Stephen Curry, teams are spending less time near the basketball and, thus, decrease their chances of getting fouled. Luckily, we can run tests for any team in any season. To do this, I have created a series of functions (seen below) that hasten the coding process. These functions condense the code and allow for the user to include what ever variables they want, albeit with a few conditions. With these functions, I will walk through an application of how to use these function using data from the 2007-08 University of Missouri (colloquially known as “Mizzou”) men’s basketball regular season.\n\nftpcts &lt;- function(data, var1, var2) {\n  data |&gt;\n  mutate(ftpct = {{ var1 }} / {{ var2 }},\n         ftm_average = ifelse({{ var1 }} &gt; 13, \"Yes\", \"No\"),\n        ftpct_average = ifelse(ftpct &gt; .713, \"Yes\", \"No\"))\n}\n\nftm_summary_func &lt;- function(data, var1, var2) { \n  ftm_summary &lt;- data |&gt;\n  group_by({{ var1 }}) |&gt;\n    summarize(win_rate = mean({{ var2 }} == \"Win\"))\n}\n\nft_histogram &lt;- function(data, xvar, alpha = .4, var) {\n  ggplot(data = data, aes(x = xvar)) +\n    geom_histogram(aes(y = ..density..), alpha = alpha, fill = \"black\") +\n    geom_density(fill = \"blue\", alpha = alpha) +\n    geom_vline(xintercept = {{ var }}, color = \"red\") \n    \n}\n\np_value &lt;- function(var1, var2) {\n  sum({{ var1 }} &gt;= {{ var2 }}) / 5000\n} \n\n\n\nRows: 31 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): team, result\ndbl (2): free_throws_made, free_throws_att\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 31 × 4\n   team             free_throws_made free_throws_att result\n   &lt;chr&gt;                       &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt; \n 1 Central Michigan               21              27 Win   \n 2 Fordham                         7              10 Win   \n 3 Southern                        5               9 Win   \n 4 Michigan State                 13              18 Loss  \n 5 Maryland                       19              23 Win   \n 6 Western Illinois               13              20 Win   \n 7 Arkansas                       23              33 Loss  \n 8 California                      9              17 Loss  \n 9 Purdue                         21              31 Win   \n10 McNeese State                   8              10 Win   \n# ℹ 21 more rows\n\n\n\nmizzou_basketball &lt;- mizzou_basketball |&gt; ftpcts(var1 = free_throws_made, var2 = free_throws_att)\n\nRunning ‘ftpcts’ creates three variables: free throw percentage, whether or not Mizzou scored more free throws than the national average in a game, and whether or not their free throw percentage was higher than the national average in a game. Important to note is that, while 10 years earlier than LSU’s season, I have still included the 2017-18 averages when calculating Mizzou’s free throw averages. To change this is easy: simply modify the values in the ‘ifelse’ statements in the functions to better correspond to the season of interest.\n\nftm_summary &lt;- ftm_summary_func(mizzou_basketball, ftm_average, result)\nmiz_ftm_diff &lt;- ftm_summary[[2]][[2]] - ftm_summary[[2]][[1]]\nmiz_ftm_diff\n\n[1] 0.4681818\n\n\nUsing ‘ftm_summary_func’, we calculate the win proportion of when Mizzou scores more or less than the average number of free throws in a game. Mizzou only exceeded the average in 10 of 31 games, but they won nearly every in which they did so; similarly, in the 21 games the Tigers did not score the average, they lost a majority of games. We see this when creating ‘miz_ftm_diff’, which is the difference in win proportions. Unlike LSU, Mizzou’s win differential is large (.468), suggesting that making free throws may have been a more important factor in determining the outcome of their games. One important note in this function is that while “var1” can be any variable, “var2” must denote the result of a game, typically “Win” or “Loss”.\n\nftstat_simulation &lt;- vector(\"double\", 5000)\nfor(i in 1:5000) {\n  ftpct_summary &lt;- mizzou_basketball |&gt;\n    mutate(ftm_average = sample(ftm_average)) |&gt;\n    group_by(ftm_average) |&gt;\n    summarize(win_rate = mean(result == \"Win\"))\n   ftstat_simulation[[i]] &lt;- ftpct_summary[[2]][[2]] - ftpct_summary[[2]][[1]]\n}\n\nview(ftstat_simulation)\n\nUnfortunately, there is no function for the for loop creating random simulations that make up the null distribution, but the code is relatively straightforward. The variable, ‘ftm_average’ is created when running the ‘ftpcts’ function, but the variable ‘result’ may have to be modified if it has a different name in your data set. By running this for loop, we are able to create our null distribution and, using one more function, plot this distribution against our variable of choice and find a p-value.\n\nftstat_simulated &lt;- tibble(ftstat_simulation = ftstat_simulation)\n\nft_histogram(ftstat_simulated, ftstat_simulation, alpha = .4, miz_ftm_diff)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\np_value(ftstat_simulation, miz_ftm_diff)\n\n[1] 0.0132\n\n\n\n\n\nAfter running our simulations and creating ‘ftstat_simulation’, we can make these results a tibble, in this case ‘ftstat_simulated’, and then put it into a plotting function. With our tibble (which functions as our dataset) created, we input our x variable of choice, in this case our win differential in each of 5000 simulations, along with our x-intercept line of Mizzou’s win differential. In this example, we can see that, unlike LSU, Mizzou’s win differential barely falls within the distribution, meaning there were few results in the simulation more extreme. When we run the p-value function, we return a value smaller less than 0.05, meaning we can reject our null hypothesis. With this, our model suggests that free throws attempted is a statistically significant variable when influencing the result of an individual basketball game."
  },
  {
    "objectID": "null_hypothesis.html#introduction",
    "href": "null_hypothesis.html#introduction",
    "title": "Do Free Throws Win Basketball Teams Games?",
    "section": "",
    "text": "With March Madness upon us (this is being published on Friday, March 22), we are being treated to three weeks of the very best college basketball. Whether it’s a potential first-round upset or a nail-biting Final Four match-up, close games are a staple of March Madness; many argue it’s what makes the tournament so great. Free throws can often be the most decisive factor in what team wins a close game. Or are they? While there are many clichés about the importance of a team making free throws, I take a closer look at whether or not free throws really do win games.\n\n\nAn article by the NCAA says that in 2018 teams shot, on average, 19.6 free throws and made 14. With these averages in mind, I will be testing these conditions under the null hypothesis by analyzing the relationship between the team wins in an individual season and if they made more than 14 free throws in a game. The goal of this test is to determine the importance, or potential lack thereof, of making free throws.\n\n\n\nFor this experiment, I have collected data of each regular season game from the 2017-2018 Louisiana State University (LSU) men’s basketball season. The reason for this is LSU made 13.9 per game that season, very close to the overall NCAA average. In this data set, we have opponent faced, free throws made, free throws attempted, and the outcome of the game (Win or Loss).\n\n\nRows: 30 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Opponent, Result\ndbl (2): FTM, FTA\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 30 × 4\n   Opponent            FTM   FTA Result\n   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; \n 1 Alcorn State         16    24 Win   \n 2 Samford              19    20 Win   \n 3 Michigan             16    23 Win   \n 4 Notre Dame            9    12 Loss  \n 5 Marquette            23    26 Loss  \n 6 UT Martin            12    20 Win   \n 7 UNCW                 17    20 Win   \n 8 Houston              17    20 Win   \n 9 Stephen F. Austin    23    29 Loss  \n10 Sam Houston State    11    20 Win   \n# ℹ 20 more rows\n\n\n\nlsu_basketball &lt;- lsu_basketball |&gt;\n  mutate(ftpct = (FTM / FTA),\n         ftm_average = ifelse(FTM &gt; 13, \"Yes\", \"No\"),\n         ftpct_average = ifelse(ftpct &gt; .713, \"Yes\", \"No\"))\n\nview(lsu_basketball)\n\nAlong with our initial variable, this code calculates the free throw percentage for each game. And, using the ‘ifelse’ statement within mutate, we can also see whether or not both free throws made and free throw percentage was better or worse than the national average (14 Free Throws Made and 71.4%); “Yes” denotes better than the average, “No” denotes worse than average.\n\nftm_summary &lt;- lsu_basketball |&gt;\n  group_by(ftm_average) |&gt;\n  summarize(win_rate = mean(Result == \"Win\"))\n\nlsu_diff &lt;- ftm_summary[[2]][[2]] - ftm_summary[[2]][[1]]\nlsu_diff\n\n[1] -0.06666667\n\n\nConveniently, of the 30 regular season games LSU played, they made more than the average 15 times and less than the average 15 times. To calculate the win percentage of games in which they shot above or below the average, we find the mean of wins when grouped by the averages. Following this, ‘lsu_diff’ is the difference between the win percentage when LSU shot above the average and when LSU shot below the average. From the data, we can see that, shockingly, LSU won more games when making a below average quantity of free throws.\n\nftm_simulation &lt;- vector(\"double\", 5000)\nfor(i in 1:5000) {\n  ftm_summary &lt;- lsu_basketball |&gt;\n    mutate(ftm_average = sample(ftm_average)) |&gt;\n    group_by(ftm_average) |&gt;\n    summarize(win_rate = mean(Result == \"Win\"))\n   ftm_simulation[[i]] &lt;- ftm_summary[[2]][[2]] - ftm_summary[[2]][[1]]\n}\n\nview(ftm_simulation)\n\nAs we are testing the condition of making free throws under the null hypothesis, the next step in our experiment is running simulations to create a null distribution. This code runs 5000 simulations, each simulation randomizing the difference of a team’s win percentage when making the average and not making the average in a hypothetical season.\n\nftm_simulated &lt;- tibble(ftm_simulation = ftm_simulation)\n\nggplot(ftm_simulated, aes(x = ftm_simulation)) +\n  geom_histogram(aes(y = ..density..), alpha = .4, fill = \"black\") +\n  geom_density(fill = \"purple\", alpha = .3) +\n  geom_vline(xintercept = lsu_diff, color = \"yellow\") +\n  labs(title = \"Free Throws Made Null Distribution\", x = \"FTM Differential\", y = \"Density\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\np_value &lt;- sum(ftm_simulation &gt;= lsu_diff) / 5000\np_value\n\n[1] 0.7632\n\n\nThe final step is to plot our null distribution alongside our value for LSU’s win differential using a vertical line. When looking at the graph, we can see the vertical line fits right with the null distribution, suggesting that the chance of LSU’s win correlation with free throws is certainly possible under null conditions. We can find a mathematical value for this using the p-value. Seen up above, this is a gigantic p-value that means that more than 75% of the time would we expect to see this win differential under null conditions, meaning we absolutely can not reject the null hypothesis. To interpret this in context of basketball statistics, we can conclude that making more than the average number of free throws in a game may not do much to a team’s probability of winning games.\n\n\n\nWhile free throws made were not much a factor in LSU winning or losing games, we can use the code up above to see if other variables may have a greater impact on determining the results of LSU games by replacing free throws made with a different variable. In this case, I use free throw percentage, and its relation to the national average, to see if that has a greater correlation with game results.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n[1] 0.7986\n\n\n\n\n\nSimilar to the histogram comparing free throw average, we can see that LSU’s differential with free throw percentage also falls right within the null distribution. When looking at the p-value, this is evident by the huge value. This allows us to conclude that making above the national average in free throws and free throw percentage does little to impact the results of college basketball games.\n\n\n\nFollowing my analysis of the 2017-18 LSU season, I was shocked by the lack of relationship between free throw metrics and the outcomes of games. There may be a few ways to explain this; namely, as referenced by the NCAA article, the amount of free throws teams are shooting is decreasing. As basketball has become more spread out, thanks to a revolution of the Three-Pointer led by Stephen Curry, teams are spending less time near the basketball and, thus, decrease their chances of getting fouled. Luckily, we can run tests for any team in any season. To do this, I have created a series of functions (seen below) that hasten the coding process. These functions condense the code and allow for the user to include what ever variables they want, albeit with a few conditions. With these functions, I will walk through an application of how to use these function using data from the 2007-08 University of Missouri (colloquially known as “Mizzou”) men’s basketball regular season.\n\nftpcts &lt;- function(data, var1, var2) {\n  data |&gt;\n  mutate(ftpct = {{ var1 }} / {{ var2 }},\n         ftm_average = ifelse({{ var1 }} &gt; 13, \"Yes\", \"No\"),\n        ftpct_average = ifelse(ftpct &gt; .713, \"Yes\", \"No\"))\n}\n\nftm_summary_func &lt;- function(data, var1, var2) { \n  ftm_summary &lt;- data |&gt;\n  group_by({{ var1 }}) |&gt;\n    summarize(win_rate = mean({{ var2 }} == \"Win\"))\n}\n\nft_histogram &lt;- function(data, xvar, alpha = .4, var) {\n  ggplot(data = data, aes(x = xvar)) +\n    geom_histogram(aes(y = ..density..), alpha = alpha, fill = \"black\") +\n    geom_density(fill = \"blue\", alpha = alpha) +\n    geom_vline(xintercept = {{ var }}, color = \"red\") \n    \n}\n\np_value &lt;- function(var1, var2) {\n  sum({{ var1 }} &gt;= {{ var2 }}) / 5000\n} \n\n\n\nRows: 31 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): team, result\ndbl (2): free_throws_made, free_throws_att\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 31 × 4\n   team             free_throws_made free_throws_att result\n   &lt;chr&gt;                       &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt; \n 1 Central Michigan               21              27 Win   \n 2 Fordham                         7              10 Win   \n 3 Southern                        5               9 Win   \n 4 Michigan State                 13              18 Loss  \n 5 Maryland                       19              23 Win   \n 6 Western Illinois               13              20 Win   \n 7 Arkansas                       23              33 Loss  \n 8 California                      9              17 Loss  \n 9 Purdue                         21              31 Win   \n10 McNeese State                   8              10 Win   \n# ℹ 21 more rows\n\n\n\nmizzou_basketball &lt;- mizzou_basketball |&gt; ftpcts(var1 = free_throws_made, var2 = free_throws_att)\n\nRunning ‘ftpcts’ creates three variables: free throw percentage, whether or not Mizzou scored more free throws than the national average in a game, and whether or not their free throw percentage was higher than the national average in a game. Important to note is that, while 10 years earlier than LSU’s season, I have still included the 2017-18 averages when calculating Mizzou’s free throw averages. To change this is easy: simply modify the values in the ‘ifelse’ statements in the functions to better correspond to the season of interest.\n\nftm_summary &lt;- ftm_summary_func(mizzou_basketball, ftm_average, result)\nmiz_ftm_diff &lt;- ftm_summary[[2]][[2]] - ftm_summary[[2]][[1]]\nmiz_ftm_diff\n\n[1] 0.4681818\n\n\nUsing ‘ftm_summary_func’, we calculate the win proportion of when Mizzou scores more or less than the average number of free throws in a game. Mizzou only exceeded the average in 10 of 31 games, but they won nearly every in which they did so; similarly, in the 21 games the Tigers did not score the average, they lost a majority of games. We see this when creating ‘miz_ftm_diff’, which is the difference in win proportions. Unlike LSU, Mizzou’s win differential is large (.468), suggesting that making free throws may have been a more important factor in determining the outcome of their games. One important note in this function is that while “var1” can be any variable, “var2” must denote the result of a game, typically “Win” or “Loss”.\n\nftstat_simulation &lt;- vector(\"double\", 5000)\nfor(i in 1:5000) {\n  ftpct_summary &lt;- mizzou_basketball |&gt;\n    mutate(ftm_average = sample(ftm_average)) |&gt;\n    group_by(ftm_average) |&gt;\n    summarize(win_rate = mean(result == \"Win\"))\n   ftstat_simulation[[i]] &lt;- ftpct_summary[[2]][[2]] - ftpct_summary[[2]][[1]]\n}\n\nview(ftstat_simulation)\n\nUnfortunately, there is no function for the for loop creating random simulations that make up the null distribution, but the code is relatively straightforward. The variable, ‘ftm_average’ is created when running the ‘ftpcts’ function, but the variable ‘result’ may have to be modified if it has a different name in your data set. By running this for loop, we are able to create our null distribution and, using one more function, plot this distribution against our variable of choice and find a p-value.\n\nftstat_simulated &lt;- tibble(ftstat_simulation = ftstat_simulation)\n\nft_histogram(ftstat_simulated, ftstat_simulation, alpha = .4, miz_ftm_diff)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\np_value(ftstat_simulation, miz_ftm_diff)\n\n[1] 0.0132\n\n\n\n\n\nAfter running our simulations and creating ‘ftstat_simulation’, we can make these results a tibble, in this case ‘ftstat_simulated’, and then put it into a plotting function. With our tibble (which functions as our dataset) created, we input our x variable of choice, in this case our win differential in each of 5000 simulations, along with our x-intercept line of Mizzou’s win differential. In this example, we can see that, unlike LSU, Mizzou’s win differential barely falls within the distribution, meaning there were few results in the simulation more extreme. When we run the p-value function, we return a value smaller less than 0.05, meaning we can reject our null hypothesis. With this, our model suggests that free throws attempted is a statistically significant variable when influencing the result of an individual basketball game."
  },
  {
    "objectID": "null_hypothesis.html#conclusion",
    "href": "null_hypothesis.html#conclusion",
    "title": "Do Free Throws Win Basketball Teams Games?",
    "section": "Conclusion",
    "text": "Conclusion\nThe goal of this project was to create a model that tested the importance of making free throws in college basketball while also providing a function that allows for further analysis of this topic. The results of this project show that variability in free throw statistics and game results greatly differ. With this, we can both struggle to make wider conclusions about free throws but also notice potential trends about the trajectory of college basketball. Primarily, as the game of basketball has evolved away from the paint in favor of three-point shots, teams are shooting less free throws than ever. As three-pointers increase their effectiveness in influencing games, the importance of the free throw may be dwindling. However, asking any basketball coach about the importance of free throws will certainly yield a response favoring making shots from the charity stripe."
  },
  {
    "objectID": "transfer_rumors.html",
    "href": "transfer_rumors.html",
    "title": "Analyzing Media Coverage of Soccer Transfer Rumors",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\nRows: 6726 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): title, date, link, content\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "transfer_rumors.html#introduction",
    "href": "transfer_rumors.html#introduction",
    "title": "Analyzing Media Coverage of Soccer Transfer Rumors",
    "section": "Introduction",
    "text": "Introduction\nFor European soccer fans, the summer months can be agonizing as the club stops in favor of international tournaments and much needed breaks for players coming off of a grueling 10-month season. Yet, even as matches stop, business doesn’t. In June, July, and August, the soccer world becomes one big auction house, as clubs look to strength their squads and certain players, both enthusiastically and unenthusiastically, look for new teams to play for. With interest over the next star signing a club can make, news publications have mastered how to report transfers. A mixture of fact and often fiction, daily reports about potential player signings and departures feed fans in need of soccer-related content. But how are transfers and transfer rumors reported on? Using all transfer-related articles from 90min.com, a global soccer news outlet with newsrooms in four continents, from May 2020 to August 2023, I will analyze trends in transfer reporting from what leagues are reported on most to common phrases you can expect to see beginning a headline.\n\nDataset Additions\nThe original data set, taken from Kaggle, includes 4 columns: the title, publishing date, link to the article, and contents of the article. However, to add layers of specificity to the data, I have added a few variables to this data set using mutate and stringr functions. Along with singling out both the date and month, I have also add a variable called “club” which denotes the first club listed in the article headline. Important to note is that I have added each club from Europe’s “Top 5 Leagues”, along with a few American and Saudi Arabian clubs who have had prominent transfer involvement, such as Inter Miami’s acquisition of Lionel Messi and Al Nassr’s acquisition of Cristiano Ronaldo. I also grouped together individual clubs into their domestic league, meaning we have the English Premier League, La Liga (Spain), Serie A (Italy), Bundesliga (Germany), Ligue 1 (France), MLS (USA/Canada), and Saudi Pro League (Saudi Arabia).\n\ntransfer_headlines &lt;- transfer_headlines |&gt;\n  mutate(month = str_extract(date, \"[A-Za-z]{3}\"),\n         year = str_extract(date, \"\\\\d{4}\"),\n  club = str_extract(title, \"Arsenal|Aston Villa|Bournemouth|Brentford|Brighton|Burnley|Chelsea|Crystal Palace|Everton|Fulham|Liverpool|Luton Town|Man(chester)* City|Man(chester)* U(ni)*t(e)*d|Newcastle|Nottingham Forest|Sheffield United|Tottenham|West Ham|Wolves|Leeds|Leicester|Southampton|Watford|Alaves|Almeria|Athletic Bilbao|Atletico Madrid|Barcelona|Real Betis|Cadiz|Celta Vigo|Getafe|Girona|Granada|Las Palmas|Mallorca|Osasuna|Rayo Vallecano|Real Madrid|Real Sociedad|Sevilla|Valencia|Villarreal|Bayern Munich|Borussia Dortmund|RB Leipzig|Union Berlin|Freiburg|Bayer Leverkusen|Eintracht Frankfurt|Wolfsburg|Mainz|Borussia Monchengladbach|Koln|Hoffenheim|Werder Bremen|Bochum|Augsburg|Stuttgart|Darmstadt|Heidenheim|AC Milan|Atalanta|Bologna|Cagliari|Empoli|Fiorentina|Genoa|Frosinone|Hellas Verona|Inter Milan|Inter |Juventus|Lazio|Leece|Monza|Napoli|Roma|Salernitana|Sassuolo|Torino|Udinese|Brest|Clermont|Le Havre|Lens|Lille|Lorient|Lyon|Marseille|Metz|Monaco|Montpellier|Nantes|Nice|Paris Saint-Germain|PSG|Reims|Rennes|Strasbourg|Toulouse|Al Nassr|Al Hilal|Al Ettifaq|Al Ahli|Saudi Arabia|Saudi Pro League|Inter Miami|LA Galaxy|MLS\"),\n         league = case_match(club, c(\"Arsenal\", \"Aston Villa\",\"Bournemouth\", \"Brentford\", \"Brighton\", \"Burnley\", \"Chelsea\", \"Crystal Palace\", \"Everton\", \"Fulham\", \"Liverpool\", \"Luton Town\", \"Man City\", \"Man Utd\", \"Newcastle\", \"Nottingham Forest\", \"Sheffield United\", \"Tottenham\", \"West Ham\", \"Wolves\", \"Leeds\", \"Leicester\", \"Southampton\", \"Watford\", \"Manchester United\", \"Manchester City\") ~ \"Premier League\", \n                             c(\"Alaves\", \"Almeria\", \"Athletic Bilbao\", \"Atletico Madrid\", \"Barcelona\", \"Real Betis\", \"Cadiz\", \"Celta Vigo\", \"Getafe\", \"Girona\", \"Granada\", \"Las Palmas\", \"Mallorca\", \"Osasuna\", \"Rayo Vallecano\", \"Real Madrid\", \"Real Sociedad\", \"Sevilla\", \"Valencia\", \"Villarreal\") ~ \"La Liga\", \n         c(\"Bayern Munich\", \"Borussia Dortmund\", \"RB Leipzig\", \"Union Berlin\", \"Freiburg\", \"Bayer Leverkusen\", \"Eintracht Frankfurt\", \"Wolfsburg\", \"Mainz\", \"Borussia Monchengladbach\", \"Koln\", \"Hoffenheim\", \"Werder Bremen\", \"Bochum\", \"Augsburg\", \"Stuttgart\", \"Darmstadt\", \"Heidenheim\") ~ \"Bundesliga\",\n         c(\"AC Milan\", \"Atalanta\", \"Bologna\", \"Cagliari\", \"Empoli\", \"Fiorentina\", \"Genoa\", \"Frosinone\", \"Hellas Verona\", \"Inter \", \"Juventus\", \"Lazio\", \"Leece\", \"Monza\", \"Napoli\", \"Roma\", \"Salernitana\", \"Sassuolo\", \"Torino\", \"Udinese\") ~ \"Serie A\",\n         c(\"Brest\", \"Clermont\", \"Le Havre\", \"Lens\", \"Lille\", \"Lorient\", \"Lyon\", \"Marseille\", \"Metz\", \"Monaco\", \"Montpellier\", \"Nantes\", \"Nice\", \"Paris Saint-Germain\", \"PSG\", \"Reims\", \"Rennes\", \"Strasbourg\", \"Toulouse\") ~ \"Ligue 1\",\n         c(\"Al Nassr\", \"Al Hilal\", \"Al Ettifaq\", \"Al Ahli\", \"Saudi Arabia\", \"Saudi Pro League\") ~ \"Saudi Pro League\",\n         c(\"Inter Miami\", \"LA Galaxy\", \"MLS\") ~ \"MLS\")) \n\n\n\n\n\n\n\ngrid_2023 &lt;- transfer_headlines |&gt;\n  mutate(player = str_extract(title, \"Caicedo|Rice|Bellingham|Kane|Neymar|Gvardiol|Havertz|Kolo Muani|Hojlund|Szoboszlai\")) |&gt;\n  filter(year == 2023) |&gt;\n  filter(!is.na(player)) |&gt;\n  ggplot(aes(x = player, fill = league)) +\n  geom_bar() +\n  scale_x_discrete(limits = c(\"Caicedo\", \"Rice\", \"Bellingham\", \"Kane\", \"Neymar\",\"Gvardiol\", \"Havertz\",\"Kolo Muani\", \"Hojlund\", \"Szoboszlai\")) +\n  labs(title = \"2023 Summer Transfers\", subtitle = \"From Left to Right: Most Expensive Transfer Fee\", x = \"Player\", y = \"Number of Headlines\", fill = \"League\") +\n  theme_fivethirtyeight() +\n  theme(axis.text.x=element_text(size=10))\n\n\ngrid.arrange(grid_2023, grid_2022, grid_2021, grid_2020)\n\n\n\n\n\nmoney &lt;- transfer_headlines |&gt;\n  mutate(includes_money_title = str_detect(title, \"£|‚¬\"),\n         includes_money_title = ifelse(str_detect(title, \"£|‚¬\"), \"yes\", \"no\"),\n         includes_money_con = str_detect(content,\"£|‚¬\"),\n         includes_money_con = ifelse(str_detect(content, \"£|‚¬\"), \"yes\", \"no\"),\n         money_amount_title = str_extract(title, \"\\\\d*\\\\.?\\\\d[m]\"),\n         money_amount_title = parse_number(money_amount_title),\n         money_amount_con = str_extract(content, \"\\\\d*\\\\.?\\\\d[m]\"),\n         money_amount_con = parse_number(money_amount_con)) \n\n\nmoney |&gt;\n  filter(includes_money_title == \"yes\",\n         money_amount_title &lt;= 200) |&gt;\n  ggplot(aes(x = money_amount_title)) +\n  geom_density() +\n  facet_wrap(~year) +\n  theme_few()\n\n\n\n\n\nclub_rumors &lt;- transfer_headlines |&gt;\n  filter(!is.na(club)) |&gt;\n  group_by(club, league, year) |&gt;\n  summarize(num_rumors = n())\n\n`summarise()` has grouped output by 'club', 'league'. You can override using\nthe `.groups` argument.\n\n\n\nd3tree2(\ntreemap(club_rumors, \n        index = c(\"year\", \"league\", \"club\"),\n        vSize = c(\"num_rumors\"), \n        vColor = \"league\"),\nrootname = \"Transfer Rumors by Club\")\n\n\n\n\n\n\n\n\n\ntransfer_headlines |&gt;\n  filter(is.na(club)) |&gt;\n  mutate(first_words = str_extract(title, \"^[A-Za-z\\\\d\\\\.':&]+\\\\s[A-Za-z\\\\d\\\\.':&]+\")) |&gt;\n  filter(!is.na(first_words)) |&gt;\n  group_by(first_words) |&gt;\n  summarize(phrases = n()) |&gt;\n  slice_max(phrases, n = 20) |&gt;\n  gt() |&gt;\n  cols_label(first_words = \"Phrase\",\n             phrases = \"Occurences\")\n\n\n\n\n\n  \n    \n      Phrase\n      Occurences\n    \n  \n  \n    Transfer rumours:\n28\n    Premier League\n24\n    Mikel Arteta\n16\n    Potential destinations\n13\n    Jurgen Klopp\n11\n    Erik ten\n10\n    Ole Gunnar\n9\n    Pep Guardiola\n9\n    Who is\n9\n    Who should\n9\n    Frank Lampard\n8\n    Thomas Tuchel\n8\n    Cristiano Ronaldo\n6\n    Every Premier\n6\n    The 10\n6\n    Things to\n6\n    Antonio Conte\n5\n    Carlo Ancelotti\n5\n    Declan Rice\n5\n    Joan Laporta\n5\n    Jose Mourinho\n5\n    Sporting CP\n5\n    The most\n5"
  }
]